% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/handle.R
\name{handle}
\alias{handle}
\alias{handle_reset}
\alias{handle_setform}
\alias{handle_setheaders}
\alias{handle_setopt}
\alias{new_handle}
\title{Creating and configuring a curl handle}
\usage{
new_handle(...)

handle_setopt(handle, ..., .list = list())

handle_setheaders(handle, ..., .list = list())

handle_setform(handle, ..., .list = list())

handle_reset(handle)
}
\arguments{
\item{...}{named options / headers to be set in the handle.
To send a file, see \code{\link{form_file}}. To list all allowed options,
see \code{\link{curl_options}}}

\item{handle}{Handle to modify}

\item{.list}{A named list of options. This is useful if you've created
a list of options elsewhere, avoiding the use of \code{do.call()}.}
}
\value{
A handle object (external pointer to the underlying curl handle).
  All functions modify the handle in place but also return the handle
  so you can create a pipeline of operations.
}
\description{
Use \code{new_handle()} to manually create a new curl handle that can be
configured with custom options and headers. Note that \code{handle_setopt}
appends options to the current handle, whereas \code{handle_setheader}
replaces the entire set of headers with the new ones. Moreover \code{handle_reset}
only resets the options/headers of the handle. It does not affect active
connections or cookies.
}
\examples{
h <- new_handle()
handle_setopt(h, customrequest = "PUT")
handle_setform(h, a = "1", b = "2")
r <- curl_fetch_memory("http://httpbin.org/put", h)
cat(rawToChar(r$content))

# Or use the list form
h <- new_handle()
handle_setopt(h, .list = list(customrequest = "PUT"))
handle_setform(h, .list = list(a = "1", b = "2"))
r <- curl_fetch_memory("http://httpbin.org/put", h)
cat(rawToChar(r$content))
}
\seealso{
Other handles: \code{\link{handle_cookies}}
}

